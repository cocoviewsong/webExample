{"mappings":"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","sources":["之前敲的代码/网站介绍.js"],"sourcesContent":["'use strict';\n\n///////////////////////////////////////\n// Modal window\n\nconst modal = document.querySelector('.modal');\nconst overlay = document.querySelector('.overlay');\nconst btnCloseModal = document.querySelector('.btn--close-modal');\nconst btnsOpenModal = document.querySelectorAll('.btn--show-modal');\n\n// 跳转到第1部分的按钮 nav\nconst btnScrollTo = document.querySelector('.btn--scroll-to');\nconst section1 = document.querySelector('#section--1');\n\n// *************************************************************\n// 跳转到第1部分 逻辑=> 点击按钮,触发滚动到section1父容器的事件\n// Element 接口的 scrollIntoView() 方法会滚动元素的父容器\nbtnScrollTo.addEventListener('click', function (e) {\n  const slcoords = section1.getBoundingClientRect(); //返回一个 DOMRect 对象，提供了元素的大小及其相对于视口的位置\n  // console.log(slcoords);\n\n  // console.log(e.target.getBoundingClientRect());\n\n  // 滚动位置\n  // console.log('Current scroll (X/Y)', window.pageXOffset.pageYOffset);\n\n  //\n  // window.scrollTo(   // scrollTo() 方法可以使界面滚动到给定元素的指定坐标位置。\n  //   // slcoords.left + window.pageXOffset,  // 兼容性好但被提示弃用\n  //   // slcoords.top + window.pageYOffset\n  //   slcoords.left + window.scrollX,\n  //   slcoords.top + window.scrollY\n  // // );\n\n  // window.scrollTo({\n  //   left: slcoords.left + window.scrollX,\n  //   top: slcoords.top + window.scrollY,\n  //   // 行为属性 实现平滑\n  //   behavior: 'smooth',\n  // });\n\n  // 现代方法 滚动到下一视图\n  section1.scrollIntoView({ behavior: 'smooth' });\n});\n\n// *************************************************************\n// 这里是模态框🟥\nconst openModal = function (e) {\n  e.preventDefault();\n  modal.classList.remove('hidden');\n  overlay.classList.remove('hidden');\n};\n\nconst closeModal = function () {\n  modal.classList.add('hidden');\n  overlay.classList.add('hidden');\n};\n\nbtnsOpenModal.forEach(btn => btn.addEventListener('click', openModal));\n\n// for (let i = 0; i < btnsOpenModal.length; i++)\n//   btnsOpenModal[i].addEventListener('click', openModal);\n\nbtnCloseModal.addEventListener('click', closeModal);\noverlay.addEventListener('click', closeModal);\n\ndocument.addEventListener('keydown', function (e) {\n  if (e.key === 'Escape' && !modal.classList.contains('hidden')) {\n    closeModal();\n  }\n});\n\n// *************************************************************\n// 切换内容\nconst tabs = document.querySelectorAll('.operations__tab');\nconst tabsContainer = document.querySelector('.operations__tab-container');\nconst tabsContent = document.querySelectorAll('.operations__content');\n\n// tabs.forEach(t => t.addEventListener('click', () => console.log('TAB')));\n// 用事件委托\ntabsContainer.addEventListener('click', function (e) {\n  // e.preventDefault();\n  const clicked = e.target.closest('.operations__tab');\n\n  // console.log(clicked);\n\n  if (!clicked) return;\n\n  // 删除活动css\n  tabs.forEach(t => t.classList.remove('operations__tab--active'));\n  tabsContent.forEach(c => c.classList.remove('operations__content--active'));\n\n  // active tab\n  clicked.classList.add('operations__tab--active');\n\n  // 区域活动,文本框那里\n  // console.log(clicked.dataset.tab);\n\n  document\n    .querySelector(`.operations__content--${clicked.dataset.tab}`)\n    .classList.add('operations__content--active');\n});\n// *************************************************************\n// // 平滑效果 nav\n// document.querySelectorAll('.nav__link').forEach(function (el) {\n//   el.addEventListener('click', function (e) {\n//     e.preventDefault();\n\n//     //\n//     const id = this.getAttribute('href');\n//     console.log(id);\n//     document.querySelector(id).scrollIntoView({ behavior: 'smooth' });\n//   });\n// });\n\n// *************************************************************\n// 导航栏跳转\n// 1.公共元素 😅为什么有用——默认点击就会产生事件,然后冒泡到父元素身上,父元素触发事件\n//  参见JS现代教程<浏览器事件简介> :当事件发生时，浏览器会创建一个 event 对象\n// 事件委托\ndocument.querySelector('.nav__links').addEventListener('click', function (e) {\n  e.preventDefault();\n\n  // 匹配策略,存在某个类则加\n  if (e.target.classList.contains('nav__link')) {\n    const id = e.target.getAttribute('href');\n    // console.log(id);\n    document.querySelector(id).scrollIntoView({ behavior: 'smooth' });\n    // console.log('link');\n  }\n});\n\n// *************************************************************\n// 导航标签淡出效果\nconst nav = document.querySelector('.nav');\n\nconst handleHover = function (e, opacity) {\n  if (e.target.classList.contains('nav__link')) {\n    const link = e.target;\n    const sibling = link.closest('.nav').querySelectorAll('.nav__link');\n    const logo = link.closest('.nav').querySelector('img');\n\n    sibling.forEach(el => {\n      if (el !== link) el.style.opacity = this;\n      // if (el !== link) el.style.opacity = opacity;\n    });\n    logo.style.opacity = this;\n    // logo.style.opacity = opacity;\n  }\n};\n\n// nav.addEventListener('mouseover',function( e) { handleHover(e, 0.5))};\n\n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\nnav.addEventListener('mouseover', handleHover.bind(0.5));\n\nnav.addEventListener('mouseout', handleHover.bind(1));\n\n// *************************************************************\n// 粘性导航\n// const initalCoords = section1.getBoundingClientRect();\n// // console.log(initalCoords);\n\n// window.addEventListener('scroll', function () {\n//   // console.log(this.window.scrollY);\n\n//   if (this.window.screenY > initalCoords.top) nav.classList.add('sticky');\n//   else nav.classList.remove('sticky');\n// });\n\n// IntersectionObserver api方法 减轻性能压力 😅 可能的叫法：交叉观察器\n// 🟥说明参见： https://ruanyifeng.com/blog/2016/11/intersectionobserver_api.html\n// const header = document.querySelector('.header');\n// const obsCallback = function (entries, observer) {\n//   entries.forEach(entry => {\n//     // console.log(entry); //看参数 isIntersecting\n//   });\n// };\n\n// const obsOptions = {\n//   root: null,\n//   threshold: 0, // 可见区域的交叉比例\n// };\n\n// const observer = new IntersectionObserver(obsCallback, obsOptions);\n// observer.observe(header);\n\nconst header = document.querySelector('.header');\nconst navHeight = nav.getBoundingClientRect().height;\n\nconst stickNav = function (entries) {\n  const [entry] = entries;\n  // console.log(entry);\n\n  if (!entry.isIntersecting) nav.classList.add('sticky');\n  else nav.classList.remove('sticky');\n};\n\nconst headerObserver = new IntersectionObserver(stickNav, {\n  root: null, //  顶级文档视窗\n  threshold: 0, //  计算交叉时添加到根(root)边界盒bounding box的矩形偏移量\n  rootMargin: `-${navHeight}px`,\n});\n\nheaderObserver.observe(header); //  observe()\t开始监听选中的目标元素\n\n// *************************************************************\n// 移动到特定视口显示内容\nconst allSections = document.querySelectorAll('.section');\n\nconst revealSection = function (entries, observe) {\n  const [entry] = entries;\n  // console.log(entry);\n\n  if (!entry.isIntersecting) return;\n  entry.target.classList.remove('section--hidden');\n  observe.unobserve(entry.target); //移除观察\n};\n\nconst sectionObserver = new IntersectionObserver(revealSection, {\n  root: null,\n  threshold: 0.15,\n});\n\nallSections.forEach(function (section) {\n  sectionObserver.observe(section); //这里才开始执行\n  // section.classList.add('section--hidden');\n});\n\n// *************************************************************\n// 懒惰加载图像\nconst imgTargets = document.querySelectorAll('img[data-src]');\n// console.log(imgTargets);\n\nconst loadImg = function (entries, observer) {\n  const [entry] = entries;\n  // console.log(entry);\n\n  if (!entry.isIntersecting) return;\n\n  // 替换src\n  entry.target.src = entry.target.dataset.src;\n\n  entry.target.addEventListener('load', function () {\n    entry.target.classList.remove('lazy-img');\n  });\n  observer.unobserve(entry.target); //移除观察\n};\n\nconst imgObserver = new IntersectionObserver(loadImg, {\n  root: null,\n  threshold: 0,\n  rootMargin: `200px`,\n});\n\nimgTargets.forEach(img => imgObserver.observe(img));\n\n// *************************************************************\n// 内容滑块 类似轮播\nconst slider = function () {\n  const slides = document.querySelectorAll('.slide');\n\n  const btnLeft = document.querySelector('.slider__btn--left');\n  const btnRight = document.querySelector('.slider__btn--right');\n\n  // 下面的点\n  const dotContainer = document.querySelector('.dots');\n\n  const createDots = function () {\n    slides.forEach(function (_, i) {\n      dotContainer.insertAdjacentHTML(\n        'beforeend',\n        `<button class=\"dots__dot\" data-slide=\"${i}\"></button>`\n      );\n    });\n  };\n  // createDots();\n\n  const activateDot = function (slide) {\n    document\n      .querySelectorAll('.dots__dot')\n      .forEach(dot => dot.classList.remove('dots__dot--active'));\n\n    document\n      .querySelector(`.dots__dot[data-slide=\"${slide}\"]`)\n      .classList.add('dots__dot--active');\n  };\n  // activateDot(0); //开始时候0亮\n\n  let curSlide = 0;\n  const maxSlide = slides.length;\n\n  const goToSlide = function (slide) {\n    slides.forEach(\n      (s, i) => (s.style.transform = `translateX(${100 * (i - curSlide)}%)`)\n    );\n  };\n\n  // goToSlide(0); //开始时划到0\n\n  // 函数调用  初始化\n  const init = function () {\n    createDots();\n    goToSlide(0);\n    activateDot(0);\n  };\n  init();\n  // const slider = document.querySelector('.slider');\n  // slider.style.transform = 'scale(0.2) translateX(-1200px)';\n  // slider.style.overflow = 'visible';\n\n  // 下一张幻灯片\n  const nextSlide = function () {\n    if (curSlide === maxSlide - 1) {\n      curSlide = 0;\n    } else {\n      curSlide++;\n    }\n\n    goToSlide(curSlide);\n    activateDot(curSlide); //激活点\n  };\n\n  const prevSlide = function () {\n    if (curSlide === 0) {\n      curSlide = maxSlide - 1;\n    } else {\n      curSlide--;\n    }\n\n    goToSlide(curSlide);\n    activateDot(curSlide); //激活点\n  };\n\n  btnRight.addEventListener('click', nextSlide);\n\n  btnLeft.addEventListener('click', prevSlide);\n\n  //键盘事件\n  document.addEventListener('keydown', function (e) {\n    // console.log(e);\n    if (e.key === 'ArrowLeft') prevSlide();\n    if (e.key === 'ArrowRight') nextSlide();\n  });\n\n  // 点的处理 事件委托\n  dotContainer.addEventListener('click', function (e) {\n    if (e.target.classList.contains('dots__dot')) {\n      const { slide } = e.target.dataset;\n      goToSlide(slide);\n      activateDot(slide);\n    }\n  });\n};\n\nslider();\n// *************************************************************\n/* // 练习😅 start  ——sekectubg ekenebts\nconsole.log(document.documentElement);\nconsole.log(document.head);\nconsole.log(document.body);\n\nconst header = document.querySelector('.header');\nconst allSections = document.querySelectorAll('.section');\nconsole.log(allSections);\n\ndocument.getElementById('section--1');\nconst allButtons = document.getElementsByTagName('button');\nconsole.log(allButtons);\n\nconsole.log(document.getElementsByClassName('btn'));\n\n// creating  and  inserting elements\n// .insertAdjacentHTML\nconst message = document.createElement('div');\nmessage.classList.add('cookie-message');\nmessage.innerHTML =\n  'We use cookied for improver functionlity and analytics.<button class=\"btn btn-close-cookie\">Got it!</buttom>';\n// header.prepend(message);\nheader.append(message);\n// header.append(message.cloneNode(true));\n// header.before(message);\n// header.after(message);\n\n// delete elements   remove()方法\ndocument\n  .querySelector('.btn-close-cookie')\n  .addEventListener('click', function () {\n    message.remove();\n  });\n\n// style css  是内联样式\nmessage.style.backgroundColor = '#37384d';\nmessage.style.width = '120%';\n\nconsole.log(message.style.height); //只能获取内联的值\nconsole.log(message.style.backgroundColor);\n\n// 获取某个元素的所有样式，再选取高度\nconsole.log(getComputedStyle(message).height);\n\nmessage.style.height =\n  Number.parseFloat(getComputedStyle(message).height, 10) + 30 + 'px';\n\n// css操控 传入属性名和值\ndocument.documentElement.style.setProperty('--color-primary', 'orangered');\n\n// 属性 __默认只能读取标准属性\nconst logo = document.querySelector('.nav__logo');\nconsole.log(logo.alt);\nconsole.log(logo.src);\nconsole.log(logo.className);\n\nlogo.alt = 'Beautiful minimalist logo';\nconsole.log(logo.alt);\n// 非标准属性可以用下面这种方式获取  获取字母上的属性\nconsole.log(logo.getAttribute('designer'));\nlogo.setAttribute('company', 'Banklist');\n\n// getAttribute('') 获取字母上的属性\nconsole.log(logo.getAttribute('src'));\n\nconst link = document.querySelector('.nav__link--btn');\nconsole.log(link.href);\nconsole.log(link.getAttribute('href'));\n\n// Data 属性\nconsole.log(logo.dataset.versionNumber);\n\n// classes\nlogo.classList.add('c', 'j');\nlogo.classList.remove('c');\nlogo.classList.toggle('c');\nlogo.classList.contains('c');\n\n// 不要用这个,会覆盖所有的类\nlogo.className = 'Jonas'; */\n\n// // 现代的添加事件\n// const consoleH1 = function (e) {\n//   console.log('事件被触发,你正在悬浮在标题上:D'); //每次悬浮到这个位置都会打印一次\n//   h1.removeEventListener('mouseenter', consoleH1); //移除事件\n// };\n\n// const h1 = document.querySelector('h1');\n// h1.addEventListener('mouseenter', consoleH1);\n\n// 事件监听 直接添加到了属性上,old \"旧代码用这个\"\n// h1.onmouseenter = consoleH1;\n\n// 事件冒泡 最开始的事件,产生的event在树的顶端, 捕获的时候才下来到目标元素\n// 回调函数发生在目标阶段,就是在等捕获阶段的到达\n// 达到目标后,开始冒泡——冒泡阶段,只通过父元素,不包括兄弟元素\n\n// // rgb随机\n// const randomInt = (min, max) =>\n//   Math.floor(Math.random() * (max - min + 1) + min);\n// const randomColor = () =>\n//   `rgb(${randomInt(0, 255)},${randomInt(0, 255)},${randomInt(0, 255)})`;\n\n// // 父元素所加的,无论啥类型的事件都会触发\n// // 事情监听器作用于😅'冒泡'阶段  想监听捕获阶段加第三个参数(true/false) 如果true则光监听捕获阶段\n// document.querySelector('.nav__link').addEventListener(\n//   'click',\n//   function (e) {\n//     // e.preventDefault();\n//     this.style.backgroundColor = randomColor();\n//     // e.target指向事件发生的位置 返回DOM  currentTarget 没查MDN ===this\n//     console.log('事情的源头是:', e.target);\n\n//     // stop 冒泡\n//     e.stopPropagation();\n//   },\n//   true\n// );\n\n// document.querySelector('.nav__links').addEventListener('click', function (e) {\n//   this.style.backgroundColor = randomColor();\n//   console.log('事情的源头是:', e.target);\n// });\n\n// document.querySelector('.nav').addEventListener('click', function (e) {\n//   this.style.backgroundColor = randomColor();\n//   console.log('事情的源头是:', e.target);\n// });\n/* \n// 遍历dom tree\nconst h1 = document.querySelector('h1');\n\n// 向下:child  node节点\nconsole.log(h1.querySelectorAll('.highlight'));\nconsole.log(h1.childNodes);\nconsole.log(h1.children);\nconsole.log(h1.firstChild);\nh1.firstElementChild.style.color = 'white';\nh1.lastElementChild.style.color = 'orangered';\n\n// 向上,选择父母\nconsole.log(h1.parentNode);\nconsole.log(h1.parentElement);\n\n// 最近查找 选择距离最短的那个\n// h1.closest('.header').style.background = 'var( --gradient-secondary)';\nh1.closest('h1').style.background = 'var( --gradient-secondary)';\n\n// 兄弟节点\nconsole.log(h1.previousElementSibling); //节点之前的节点\nconsole.log(h1.nextElementSibling);\n\nconsole.log(h1.previousSibling);\nconsole.log(h1.nextSibling);\n\nconsole.log(h1.parentElement.children);\n\n[...h1.parentElement.children].forEach(function (mov) {}); */\n\n// document.addEventListener('DOMContentLoaded', function (e) {\n//   console.log('加载完成', e);\n// });\n\n// window.addEventListener('load', function (e) {\n//   console.log('加载', e);\n// });\n\n// 是否离开网站\n// window.addEventListener('beforeunload', function (e) {\n//   e.preventDefault();\n//   console.log('?', e);\n//   e.returnValue = '';\n// });\n"],"names":[],"version":3,"file":"网站介绍.bf9b058e.js.map","sourceRoot":"/__parcel_source_root/"}